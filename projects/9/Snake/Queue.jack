// Queue.jack
/** 队列类 */
class Queue {

    field Array queue;   // 数组来存储队列元素
    field int front;     // 队列头部索引
    field int back;      // 队列尾部索引
    field int size;      // 队列当前大小
    field int capacity;  // 队列容量

    /** 构造函数，初始化队列 */
    constructor Queue new(int Acapacity) {
        let queue = Array.new(Acapacity + 1);   // 创建数组
        let front = 0;
        let back = 0;
        let size = 0;
        let capacity = Acapacity + 1;
        return this;
    }

    /** 释放队列占用的内存 */
    method void dispose() {
        do queue.dispose();  // 释放数组
        do Memory.deAlloc(this);
        return;
    }

    /** 入队操作，将元素添加到队列尾部 */
    method void push(int value) {
        if (size < capacity) {  // 如果队列没有满
            let queue[back] = value;  // 将元素添加到队列尾部
            let back = back + 1; // 更新尾部索引
            if (back = capacity){
                let back = 0;
            }
            let size = size + 1;  // 增加队列大小
        }
        return;
    }

    /** 出队操作，移除并返回队列头部元素 */
    method int pop() {
        var int value;
        if (size > 0) {  // 如果队列不为空
            let value = queue[front];  // 获取队列头部元素
            let front = front + 1; // 更新头部索引
            if (front = capacity){
                let front = 0;
            }
            let size = size - 1;  // 减少队列大小
        } else {
            let value = 0;  // 如果队列为空，返回 -1（表示错误）
        }
        return value;
    }

    /** 返回队列头部元素，但不移除它 */
    method int front() {
        if (size > 0) {
            return queue[front];  // 返回头部元素
        } else {
            return 0;  // 如果队列为空，返回 -1
        }
    }

    /** 返回队列尾部元素，但不移除它 */
    method int back() {
        var int index;
        if (size > 0) {
            let index = back;  // 计算尾部索引
            if (index > 0) {
                let index = index - 1;
            }
            else {
                let index = capacity - 1;
            }
            return queue[index];  // 返回尾部元素
        } else {
            return 0;  // 如果队列为空，返回 -1
        }
    }

    /** 判断队列是否为空 */
    method boolean isEmpty() {
        return size = 0;
    }

    /** 获取队列当前大小 */
    method int size() {
        return size;
    }
}
