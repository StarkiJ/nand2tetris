function Math.init 0
push constant 16
pop static 0
push static 0
call Array.new 1
pop static 1
push static 1
push constant 0
add
push constant 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 1
push constant 1
add
push constant 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 1
push constant 2
add
push constant 4
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 1
push constant 3
add
push constant 8
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 1
push constant 4
add
push constant 16
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 1
push constant 5
add
push constant 32
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 1
push constant 6
add
push constant 64
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 1
push constant 7
add
push constant 128
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 1
push constant 8
add
push constant 256
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 1
push constant 9
add
push constant 512
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 1
push constant 10
add
push constant 1024
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 1
push constant 11
add
push constant 2048
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 1
push constant 12
add
push constant 4096
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 1
push constant 13
add
push constant 8192
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 1
push constant 14
add
push constant 16384
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 1
push constant 15
add
push constant 16384
push constant 16384
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function Math.multiply 3
push argument 0
push constant 0
eq
push argument 1
push constant 0
eq
or
not
if-goto IF_ELSE_0
push constant 0
return
label IF_ELSE_0
push constant 0
pop local 0
push argument 0
pop local 1
push constant 0
pop local 2
label WHILE_START_1
push local 2
push static 0
lt
not
if-goto WHILE_END_1
push argument 1
push local 2
call Math.bit 2
not
if-goto IF_ELSE_2
push local 0
push local 1
add
pop local 0
label IF_ELSE_2
push local 1
push local 1
add
pop local 1
push local 2
push constant 1
add
pop local 2
goto WHILE_START_1
label WHILE_END_1
push local 0
return
function Math.divide 2
push argument 0
push constant 0
lt
not
if-goto IF_ELSE_3
push constant 0
not
pop local 1
push argument 0
neg
pop argument 0
goto IF_END_3
label IF_ELSE_3
push constant 0
pop local 1
label IF_END_3
push argument 1
push constant 0
lt
not
if-goto IF_ELSE_4
push local 1
not
pop local 1
push argument 1
neg
pop argument 1
label IF_ELSE_4
push argument 1
push argument 0
gt
push argument 1
push constant 0
lt
or
not
if-goto IF_ELSE_5
push constant 0
return
label IF_ELSE_5
push argument 0
push argument 1
push argument 1
add
call Math.divide 2
pop local 0
push argument 0
push constant 2
push local 0
call Math.multiply 2
push argument 1
call Math.multiply 2
sub
push argument 1
lt
not
if-goto IF_ELSE_6
push local 1
not
if-goto IF_ELSE_7
push local 0
push local 0
add
neg
return
label IF_ELSE_7
push local 0
push local 0
add
return
label IF_ELSE_6
push local 1
not
if-goto IF_ELSE_8
push local 0
push local 0
add
push constant 1
add
neg
return
label IF_ELSE_8
push local 0
push local 0
add
push constant 1
add
return
function Math.sqrt 4
push argument 0
push constant 0
gt
not
not
if-goto IF_ELSE_9
push constant 0
return
label IF_ELSE_9
push constant 0
pop local 0
push static 0
push constant 2
call Math.divide 2
push constant 1
sub
pop local 1
label WHILE_START_10
push local 1
push constant 0
lt
not
not
if-goto WHILE_END_10
push local 0
push static 1
push local 1
add
pop pointer 1
push that 0
add
pop local 2
push local 2
push local 2
call Math.multiply 2
pop local 3
push local 3
push argument 0
gt
not
push local 3
push constant 0
gt
and
not
if-goto IF_ELSE_11
push local 2
pop local 0
label IF_ELSE_11
push local 1
push constant 1
sub
pop local 1
goto WHILE_START_10
label WHILE_END_10
push local 0
return
function Math.max 0
push argument 0
push argument 1
gt
not
if-goto IF_ELSE_12
push argument 0
return
label IF_ELSE_12
push argument 1
return
function Math.min 0
push argument 0
push argument 1
lt
not
if-goto IF_ELSE_13
push argument 0
return
label IF_ELSE_13
push argument 1
return
function Math.abs 0
push argument 0
push constant 0
lt
not
if-goto IF_ELSE_14
push argument 0
neg
return
label IF_ELSE_14
push argument 0
return
function Math.bit 0
push argument 0
push static 1
push argument 1
add
pop pointer 1
push that 0
and
push constant 0
eq
not
if-goto IF_ELSE_15
push constant 0
return
label IF_ELSE_15
push constant 0
not
return
function Math.power 2
push argument 1
push constant 0
gt
not
not
if-goto IF_ELSE_16
push constant 1
return
label IF_ELSE_16
push argument 0
push constant 2
eq
not
if-goto IF_ELSE_17
push argument 1
push static 0
lt
not
if-goto IF_ELSE_18
push static 1
push argument 1
add
pop pointer 1
push that 0
return
goto IF_END_18
label IF_ELSE_18
push constant 0
return
label IF_END_18
label IF_ELSE_17
push constant 1
pop local 0
push argument 0
pop local 1
label WHILE_START_19
push argument 1
push constant 0
gt
not
if-goto WHILE_END_19
push argument 1
push constant 1
and
push constant 1
eq
not
if-goto IF_ELSE_20
push local 0
push local 1
call Math.multiply 2
pop local 0
label IF_ELSE_20
push local 1
push local 1
call Math.multiply 2
pop local 1
push argument 1
push constant 2
call Math.divide 2
pop argument 1
goto WHILE_START_19
label WHILE_END_19
push local 0
return
