<class>
<keyword> class </keyword>
<identifier> Screen </identifier>
<symbol> { </symbol>
<classVarDec>
<keyword> static </keyword>
<identifier> Array </identifier>
<identifier> screen </identifier>
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> static </keyword>
<keyword> boolean </keyword>
<identifier> color </identifier>
<symbol> ; </symbol>
</classVarDec>
<subroutineDec>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> init </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> screen </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 16384 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> color </identifier>
<symbol> = </symbol>
<expression>
<term>
<keyword> true </keyword>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> clearScreen </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<varDec>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> i </identifier>
<symbol> ; </symbol>
</varDec>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<whileStatement>
<keyword> while </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> i </identifier>
</term>
<symbol> &lt; </symbol>
<term>
<integerConstant> 8192 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> screen </identifier>
<symbol> [ </symbol>
<expression>
<term>
<identifier> i </identifier>
</term>
</expression>
<symbol> ] </symbol>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> i </identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</whileStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> setColor </identifier>
<symbol> ( </symbol>
<parameterList>
<keyword> boolean </keyword>
<identifier> b </identifier>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> color </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> b </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> drawPixel </identifier>
<symbol> ( </symbol>
<parameterList>
<keyword> int </keyword>
<identifier> x </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> y </identifier>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<varDec>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> address </identifier>
<symbol> , </symbol>
<identifier> mask </identifier>
<symbol> ; </symbol>
</varDec>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> address </identifier>
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> y </identifier>
</term>
<symbol> * </symbol>
<term>
<integerConstant> 32 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> + </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> x </identifier>
</term>
<symbol> / </symbol>
<term>
<integerConstant> 16 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> mask </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> Math </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 2 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> x </identifier>
</term>
<symbol> &amp; </symbol>
<term>
<integerConstant> 15 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> color </identifier>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> screen </identifier>
<symbol> [ </symbol>
<expression>
<term>
<identifier> address </identifier>
</term>
</expression>
<symbol> ] </symbol>
<symbol> = </symbol>
<expression>
<term>
<identifier> screen </identifier>
<symbol> [ </symbol>
<expression>
<term>
<identifier> address </identifier>
</term>
</expression>
<symbol> ] </symbol>
</term>
<symbol> | </symbol>
<term>
<identifier> mask </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> screen </identifier>
<symbol> [ </symbol>
<expression>
<term>
<identifier> address </identifier>
</term>
</expression>
<symbol> ] </symbol>
<symbol> = </symbol>
<expression>
<term>
<identifier> screen </identifier>
<symbol> [ </symbol>
<expression>
<term>
<identifier> address </identifier>
</term>
</expression>
<symbol> ] </symbol>
</term>
<symbol> &amp; </symbol>
<term>
<symbol> ~ </symbol>
<term>
<identifier> mask </identifier>
</term>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> drawHLine </identifier>
<symbol> ( </symbol>
<parameterList>
<keyword> int </keyword>
<identifier> x1 </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> x2 </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> y </identifier>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<varDec>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> address </identifier>
<symbol> , </symbol>
<identifier> startBit </identifier>
<symbol> , </symbol>
<identifier> endBit </identifier>
<symbol> , </symbol>
<identifier> mask </identifier>
<symbol> ; </symbol>
</varDec>
<varDec>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> startWord </identifier>
<symbol> , </symbol>
<identifier> endWord </identifier>
<symbol> , </symbol>
<identifier> i </identifier>
<symbol> ; </symbol>
</varDec>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> startWord </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> x1 </identifier>
</term>
<symbol> / </symbol>
<term>
<integerConstant> 16 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> endWord </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> x2 </identifier>
</term>
<symbol> / </symbol>
<term>
<integerConstant> 16 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> address </identifier>
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> y </identifier>
</term>
<symbol> * </symbol>
<term>
<integerConstant> 32 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> + </symbol>
<term>
<identifier> startWord </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> startBit </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> x1 </identifier>
</term>
<symbol> &amp; </symbol>
<term>
<integerConstant> 15 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> endBit </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> x2 </identifier>
</term>
<symbol> &amp; </symbol>
<term>
<integerConstant> 15 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> startWord </identifier>
</term>
<symbol> = </symbol>
<term>
<identifier> endWord </identifier>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> mask </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> Math </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 2 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> endBit </identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
<symbol> - </symbol>
<term>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> Math </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 2 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> startBit </identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> color </identifier>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> screen </identifier>
<symbol> [ </symbol>
<expression>
<term>
<identifier> address </identifier>
</term>
</expression>
<symbol> ] </symbol>
<symbol> = </symbol>
<expression>
<term>
<identifier> screen </identifier>
<symbol> [ </symbol>
<expression>
<term>
<identifier> address </identifier>
</term>
</expression>
<symbol> ] </symbol>
</term>
<symbol> | </symbol>
<term>
<identifier> mask </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> screen </identifier>
<symbol> [ </symbol>
<expression>
<term>
<identifier> address </identifier>
</term>
</expression>
<symbol> ] </symbol>
<symbol> = </symbol>
<expression>
<term>
<identifier> screen </identifier>
<symbol> [ </symbol>
<expression>
<term>
<identifier> address </identifier>
</term>
</expression>
<symbol> ] </symbol>
</term>
<symbol> &amp; </symbol>
<term>
<symbol> ~ </symbol>
<term>
<identifier> mask </identifier>
</term>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> mask </identifier>
<symbol> = </symbol>
<expression>
<term>
<symbol> - </symbol>
<term>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> Math </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 2 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> startBit </identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> color </identifier>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> screen </identifier>
<symbol> [ </symbol>
<expression>
<term>
<identifier> address </identifier>
</term>
</expression>
<symbol> ] </symbol>
<symbol> = </symbol>
<expression>
<term>
<identifier> screen </identifier>
<symbol> [ </symbol>
<expression>
<term>
<identifier> address </identifier>
</term>
</expression>
<symbol> ] </symbol>
</term>
<symbol> | </symbol>
<term>
<identifier> mask </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> screen </identifier>
<symbol> [ </symbol>
<expression>
<term>
<identifier> address </identifier>
</term>
</expression>
<symbol> ] </symbol>
<symbol> = </symbol>
<expression>
<term>
<identifier> screen </identifier>
<symbol> [ </symbol>
<expression>
<term>
<identifier> address </identifier>
</term>
</expression>
<symbol> ] </symbol>
</term>
<symbol> &amp; </symbol>
<term>
<symbol> ~ </symbol>
<term>
<identifier> mask </identifier>
</term>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<letStatement>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> startWord </identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> address </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> address </identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<whileStatement>
<keyword> while </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> i </identifier>
</term>
<symbol> &lt; </symbol>
<term>
<identifier> endWord </identifier>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> color </identifier>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> screen </identifier>
<symbol> [ </symbol>
<expression>
<term>
<identifier> address </identifier>
</term>
</expression>
<symbol> ] </symbol>
<symbol> = </symbol>
<expression>
<term>
<symbol> - </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> screen </identifier>
<symbol> [ </symbol>
<expression>
<term>
<identifier> address </identifier>
</term>
</expression>
<symbol> ] </symbol>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<letStatement>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> i </identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> address </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> address </identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</whileStatement>
<letStatement>
<keyword> let </keyword>
<identifier> mask </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> Math </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 2 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> endBit </identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
<symbol> - </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> color </identifier>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> screen </identifier>
<symbol> [ </symbol>
<expression>
<term>
<identifier> address </identifier>
</term>
</expression>
<symbol> ] </symbol>
<symbol> = </symbol>
<expression>
<term>
<identifier> screen </identifier>
<symbol> [ </symbol>
<expression>
<term>
<identifier> address </identifier>
</term>
</expression>
<symbol> ] </symbol>
</term>
<symbol> | </symbol>
<term>
<identifier> mask </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> screen </identifier>
<symbol> [ </symbol>
<expression>
<term>
<identifier> address </identifier>
</term>
</expression>
<symbol> ] </symbol>
<symbol> = </symbol>
<expression>
<term>
<identifier> screen </identifier>
<symbol> [ </symbol>
<expression>
<term>
<identifier> address </identifier>
</term>
</expression>
<symbol> ] </symbol>
</term>
<symbol> &amp; </symbol>
<term>
<symbol> ~ </symbol>
<term>
<identifier> mask </identifier>
</term>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> drawLine </identifier>
<symbol> ( </symbol>
<parameterList>
<keyword> int </keyword>
<identifier> x1 </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> y1 </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> x2 </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> y2 </identifier>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<varDec>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> dx </identifier>
<symbol> , </symbol>
<identifier> dy </identifier>
<symbol> , </symbol>
<identifier> a </identifier>
<symbol> , </symbol>
<identifier> b </identifier>
<symbol> , </symbol>
<identifier> diff </identifier>
<symbol> ; </symbol>
</varDec>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> dx </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> x2 </identifier>
</term>
<symbol> - </symbol>
<term>
<identifier> x1 </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> dy </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> y2 </identifier>
</term>
<symbol> - </symbol>
<term>
<identifier> y1 </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> dy </identifier>
</term>
<symbol> = </symbol>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> dx </identifier>
</term>
<symbol> = </symbol>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> Screen </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> x1 </identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> y1 </identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> dx </identifier>
</term>
<symbol> &gt; </symbol>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> Screen </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> x1 </identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> x2 </identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> y2 </identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> Screen </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> x2 </identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> x1 </identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> y2 </identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<letStatement>
<keyword> let </keyword>
<identifier> a </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> b </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> diff </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> dx </identifier>
</term>
<symbol> &gt; </symbol>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> dy </identifier>
</term>
<symbol> &gt; </symbol>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<whileStatement>
<keyword> while </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> a </identifier>
</term>
<symbol> &gt; </symbol>
<term>
<identifier> dx </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</term>
<symbol> &amp; </symbol>
<term>
<symbol> ~ </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> b </identifier>
</term>
<symbol> &gt; </symbol>
<term>
<identifier> dy </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> Screen </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> x1 </identifier>
</term>
<symbol> + </symbol>
<term>
<identifier> a </identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> y1 </identifier>
</term>
<symbol> + </symbol>
<term>
<identifier> b </identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> diff </identifier>
</term>
<symbol> &lt; </symbol>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> a </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> a </identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> diff </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> diff </identifier>
</term>
<symbol> + </symbol>
<term>
<identifier> dy </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> b </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> b </identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> diff </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> diff </identifier>
</term>
<symbol> - </symbol>
<term>
<identifier> dx </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</whileStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> dy </identifier>
</term>
<symbol> &lt; </symbol>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<whileStatement>
<keyword> while </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> a </identifier>
</term>
<symbol> &gt; </symbol>
<term>
<identifier> dx </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</term>
<symbol> &amp; </symbol>
<term>
<symbol> ~ </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> b </identifier>
</term>
<symbol> &lt; </symbol>
<term>
<identifier> dy </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> Screen </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> x1 </identifier>
</term>
<symbol> + </symbol>
<term>
<identifier> a </identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> y1 </identifier>
</term>
<symbol> + </symbol>
<term>
<identifier> b </identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> diff </identifier>
</term>
<symbol> &lt; </symbol>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> a </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> a </identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> diff </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> diff </identifier>
</term>
<symbol> - </symbol>
<term>
<identifier> dy </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> b </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> b </identifier>
</term>
<symbol> - </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> diff </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> diff </identifier>
</term>
<symbol> - </symbol>
<term>
<identifier> dx </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</whileStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> dx </identifier>
</term>
<symbol> = </symbol>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> dy </identifier>
</term>
<symbol> &gt; </symbol>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<whileStatement>
<keyword> while </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> b </identifier>
</term>
<symbol> &gt; </symbol>
<term>
<identifier> dy </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> Screen </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> x1 </identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> y1 </identifier>
</term>
<symbol> + </symbol>
<term>
<identifier> b </identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<letStatement>
<keyword> let </keyword>
<identifier> b </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> b </identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</whileStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> dy </identifier>
</term>
<symbol> &lt; </symbol>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<whileStatement>
<keyword> while </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> b </identifier>
</term>
<symbol> &lt; </symbol>
<term>
<identifier> dy </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> Screen </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> x1 </identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> y1 </identifier>
</term>
<symbol> + </symbol>
<term>
<identifier> b </identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<letStatement>
<keyword> let </keyword>
<identifier> b </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> b </identifier>
</term>
<symbol> - </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</whileStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> dx </identifier>
</term>
<symbol> &lt; </symbol>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> dy </identifier>
</term>
<symbol> &gt; </symbol>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<whileStatement>
<keyword> while </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> a </identifier>
</term>
<symbol> &lt; </symbol>
<term>
<identifier> dx </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</term>
<symbol> &amp; </symbol>
<term>
<symbol> ~ </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> b </identifier>
</term>
<symbol> &gt; </symbol>
<term>
<identifier> dy </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> Screen </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> x1 </identifier>
</term>
<symbol> + </symbol>
<term>
<identifier> a </identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> y1 </identifier>
</term>
<symbol> + </symbol>
<term>
<identifier> b </identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> diff </identifier>
</term>
<symbol> &lt; </symbol>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> a </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> a </identifier>
</term>
<symbol> - </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> diff </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> diff </identifier>
</term>
<symbol> + </symbol>
<term>
<identifier> dy </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> b </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> b </identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> diff </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> diff </identifier>
</term>
<symbol> + </symbol>
<term>
<identifier> dx </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</whileStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> dy </identifier>
</term>
<symbol> &lt; </symbol>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<whileStatement>
<keyword> while </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> a </identifier>
</term>
<symbol> &lt; </symbol>
<term>
<identifier> dx </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</term>
<symbol> &amp; </symbol>
<term>
<symbol> ~ </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> b </identifier>
</term>
<symbol> &lt; </symbol>
<term>
<identifier> dy </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> Screen </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> x1 </identifier>
</term>
<symbol> + </symbol>
<term>
<identifier> a </identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> y1 </identifier>
</term>
<symbol> + </symbol>
<term>
<identifier> b </identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> diff </identifier>
</term>
<symbol> &lt; </symbol>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> a </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> a </identifier>
</term>
<symbol> - </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> diff </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> diff </identifier>
</term>
<symbol> - </symbol>
<term>
<identifier> dy </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> b </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> b </identifier>
</term>
<symbol> - </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> diff </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> diff </identifier>
</term>
<symbol> + </symbol>
<term>
<identifier> dx </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</whileStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> drawRectangle </identifier>
<symbol> ( </symbol>
<parameterList>
<keyword> int </keyword>
<identifier> x1 </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> y1 </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> x2 </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> y2 </identifier>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<varDec>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> address </identifier>
<symbol> , </symbol>
<identifier> startBit </identifier>
<symbol> , </symbol>
<identifier> endBit </identifier>
<symbol> , </symbol>
<identifier> maskLeft </identifier>
<symbol> , </symbol>
<identifier> maskRight </identifier>
<symbol> ; </symbol>
</varDec>
<varDec>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> startWord </identifier>
<symbol> , </symbol>
<identifier> endWord </identifier>
<symbol> , </symbol>
<identifier> i </identifier>
<symbol> , </symbol>
<identifier> tmpAddr </identifier>
<symbol> ; </symbol>
</varDec>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> startWord </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> x1 </identifier>
</term>
<symbol> / </symbol>
<term>
<integerConstant> 16 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> endWord </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> x2 </identifier>
</term>
<symbol> / </symbol>
<term>
<integerConstant> 16 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> address </identifier>
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> y1 </identifier>
</term>
<symbol> * </symbol>
<term>
<integerConstant> 32 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> + </symbol>
<term>
<identifier> startWord </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> startBit </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> x1 </identifier>
</term>
<symbol> &amp; </symbol>
<term>
<integerConstant> 15 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> endBit </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> x2 </identifier>
</term>
<symbol> &amp; </symbol>
<term>
<integerConstant> 15 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> startWord </identifier>
</term>
<symbol> = </symbol>
<term>
<identifier> endWord </identifier>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> maskLeft </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> Math </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 2 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> endBit </identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
<symbol> - </symbol>
<term>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> Math </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 2 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> startBit </identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> color </identifier>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<whileStatement>
<keyword> while </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> y1 </identifier>
</term>
<symbol> &gt; </symbol>
<term>
<identifier> y2 </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> screen </identifier>
<symbol> [ </symbol>
<expression>
<term>
<identifier> address </identifier>
</term>
</expression>
<symbol> ] </symbol>
<symbol> = </symbol>
<expression>
<term>
<identifier> screen </identifier>
<symbol> [ </symbol>
<expression>
<term>
<identifier> address </identifier>
</term>
</expression>
<symbol> ] </symbol>
</term>
<symbol> | </symbol>
<term>
<identifier> maskLeft </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> address </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> address </identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 32 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> y1 </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> y1 </identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</whileStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<whileStatement>
<keyword> while </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> y1 </identifier>
</term>
<symbol> &gt; </symbol>
<term>
<identifier> y2 </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> screen </identifier>
<symbol> [ </symbol>
<expression>
<term>
<identifier> address </identifier>
</term>
</expression>
<symbol> ] </symbol>
<symbol> = </symbol>
<expression>
<term>
<identifier> screen </identifier>
<symbol> [ </symbol>
<expression>
<term>
<identifier> address </identifier>
</term>
</expression>
<symbol> ] </symbol>
</term>
<symbol> &amp; </symbol>
<term>
<symbol> ~ </symbol>
<term>
<identifier> maskLeft </identifier>
</term>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> address </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> address </identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 32 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> y1 </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> y1 </identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</whileStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> maskLeft </identifier>
<symbol> = </symbol>
<expression>
<term>
<symbol> - </symbol>
<term>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> Math </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 2 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> startBit </identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> maskRight </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> Math </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 2 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> endBit </identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
<symbol> - </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<whileStatement>
<keyword> while </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> y1 </identifier>
</term>
<symbol> &gt; </symbol>
<term>
<identifier> y2 </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> tmpAddr </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> address </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> color </identifier>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> screen </identifier>
<symbol> [ </symbol>
<expression>
<term>
<identifier> tmpAddr </identifier>
</term>
</expression>
<symbol> ] </symbol>
<symbol> = </symbol>
<expression>
<term>
<identifier> screen </identifier>
<symbol> [ </symbol>
<expression>
<term>
<identifier> tmpAddr </identifier>
</term>
</expression>
<symbol> ] </symbol>
</term>
<symbol> | </symbol>
<term>
<identifier> maskLeft </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> screen </identifier>
<symbol> [ </symbol>
<expression>
<term>
<identifier> tmpAddr </identifier>
</term>
</expression>
<symbol> ] </symbol>
<symbol> = </symbol>
<expression>
<term>
<identifier> screen </identifier>
<symbol> [ </symbol>
<expression>
<term>
<identifier> tmpAddr </identifier>
</term>
</expression>
<symbol> ] </symbol>
</term>
<symbol> &amp; </symbol>
<term>
<symbol> ~ </symbol>
<term>
<identifier> maskLeft </identifier>
</term>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<letStatement>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> startWord </identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> tmpAddr </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> tmpAddr </identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<whileStatement>
<keyword> while </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> i </identifier>
</term>
<symbol> &lt; </symbol>
<term>
<identifier> endWord </identifier>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> color </identifier>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> screen </identifier>
<symbol> [ </symbol>
<expression>
<term>
<identifier> tmpAddr </identifier>
</term>
</expression>
<symbol> ] </symbol>
<symbol> = </symbol>
<expression>
<term>
<symbol> - </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> screen </identifier>
<symbol> [ </symbol>
<expression>
<term>
<identifier> tmpAddr </identifier>
</term>
</expression>
<symbol> ] </symbol>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<letStatement>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> i </identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> tmpAddr </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> tmpAddr </identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</whileStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> color </identifier>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> screen </identifier>
<symbol> [ </symbol>
<expression>
<term>
<identifier> tmpAddr </identifier>
</term>
</expression>
<symbol> ] </symbol>
<symbol> = </symbol>
<expression>
<term>
<identifier> screen </identifier>
<symbol> [ </symbol>
<expression>
<term>
<identifier> tmpAddr </identifier>
</term>
</expression>
<symbol> ] </symbol>
</term>
<symbol> | </symbol>
<term>
<identifier> maskRight </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> screen </identifier>
<symbol> [ </symbol>
<expression>
<term>
<identifier> tmpAddr </identifier>
</term>
</expression>
<symbol> ] </symbol>
<symbol> = </symbol>
<expression>
<term>
<identifier> screen </identifier>
<symbol> [ </symbol>
<expression>
<term>
<identifier> tmpAddr </identifier>
</term>
</expression>
<symbol> ] </symbol>
</term>
<symbol> &amp; </symbol>
<term>
<symbol> ~ </symbol>
<term>
<identifier> maskRight </identifier>
</term>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<letStatement>
<keyword> let </keyword>
<identifier> address </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> address </identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 32 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> y1 </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> y1 </identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</whileStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> drawCircle </identifier>
<symbol> ( </symbol>
<parameterList>
<keyword> int </keyword>
<identifier> x </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> y </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> r </identifier>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<varDec>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> dy </identifier>
<symbol> , </symbol>
<identifier> dx </identifier>
<symbol> , </symbol>
<identifier> rSquared </identifier>
<symbol> ; </symbol>
</varDec>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> r </identifier>
</term>
<symbol> &lt; </symbol>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> | </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> r </identifier>
</term>
<symbol> &gt; </symbol>
<term>
<integerConstant> 181 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> r </identifier>
</term>
<symbol> = </symbol>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> Screen </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> x </identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> y </identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<letStatement>
<keyword> let </keyword>
<identifier> rSquared </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> r </identifier>
</term>
<symbol> * </symbol>
<term>
<identifier> r </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> dy </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> dx </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> r </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<whileStatement>
<keyword> while </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> dy </identifier>
</term>
<symbol> &gt; </symbol>
<term>
<identifier> dx </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> Screen </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> x </identifier>
</term>
<symbol> - </symbol>
<term>
<identifier> dx </identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> x </identifier>
</term>
<symbol> + </symbol>
<term>
<identifier> dx </identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> y </identifier>
</term>
<symbol> + </symbol>
<term>
<identifier> dy </identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> Screen </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> x </identifier>
</term>
<symbol> - </symbol>
<term>
<identifier> dx </identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> x </identifier>
</term>
<symbol> + </symbol>
<term>
<identifier> dx </identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> y </identifier>
</term>
<symbol> - </symbol>
<term>
<identifier> dy </identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> Screen </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> x </identifier>
</term>
<symbol> - </symbol>
<term>
<identifier> dy </identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> x </identifier>
</term>
<symbol> + </symbol>
<term>
<identifier> dy </identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> y </identifier>
</term>
<symbol> + </symbol>
<term>
<identifier> dx </identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> Screen </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> x </identifier>
</term>
<symbol> - </symbol>
<term>
<identifier> dy </identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> x </identifier>
</term>
<symbol> + </symbol>
<term>
<identifier> dy </identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> y </identifier>
</term>
<symbol> - </symbol>
<term>
<identifier> dx </identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<letStatement>
<keyword> let </keyword>
<identifier> dy </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> dy </identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> dx </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> Math </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> rSquared </identifier>
</term>
<symbol> - </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> dy </identifier>
</term>
<symbol> * </symbol>
<term>
<identifier> dy </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</whileStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<symbol> } </symbol>
</class>
