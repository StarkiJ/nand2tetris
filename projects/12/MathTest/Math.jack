// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack
/**
 *  A library of commonly used mathematical functions.
 *  All functions runs in O(n), where n is the number of bits used
 *  for representing a two's complement integer value (16 in the Hack computer).
 *  Note: Jack compilers implement multiplication and division
 *  using calls to OS functions in this class.
 */
class Math
{
    static int n;             // Number of bits used for representing a two's complement integer
    static Array powersOfTwo; // Stores 2^0, 2^1, 2^2,..., 2^(n-1)

    // Initializes the Math library.
    function void init()
    {
        let n = 16;
        let powersOfTwo = Array.new(n);
        let powersOfTwo[0] = 1;
        let powersOfTwo[1] = 2;
        let powersOfTwo[2] = 4;
        let powersOfTwo[3] = 8;
        let powersOfTwo[4] = 16;
        let powersOfTwo[5] = 32;
        let powersOfTwo[6] = 64;
        let powersOfTwo[7] = 128;
        let powersOfTwo[8] = 256;
        let powersOfTwo[9] = 512;
        let powersOfTwo[10] = 1024;
        let powersOfTwo[11] = 2048;
        let powersOfTwo[12] = 4096;
        let powersOfTwo[13] = 8192;
        let powersOfTwo[14] = 16384;
        let powersOfTwo[15] = 16384 + 16384; // 2^15溢出
        return;
    }

    /** Returns the product of x and y.
     *  When a Jack compiler detects the multiplication operator '*'
     *  in an expression, it handles it by invoking this method.
     *  Thus, in Jack, x * y and Math.multiply(x,y) return the same value. */
    function int multiply(int x, int y)
    {
        var int sum, xShifted, i;

        let sum = 0;
        let xShifted = x;
        let i = 0;
        while (i < n)
        {
            if (Math.bit(y, i))
            {
                let sum = sum + xShifted;
            }
            let xShifted = xShifted + xShifted;
            let i = i + 1;
        }
        return sum;
    }

    /** Returns the integer part of x / y.
     *  When a Jack compiler detects the division operator '/'
     *  an an expression, it handles it by invoking this method.
     *  Thus, x/y and Math.divide(x,y) return the same value. */
    function int divide(int x, int y)
    {
        var int q;
        var boolean isNeg;

        // 处理负数
        if (x < 0)
        {
            let isNeg = true;
            let x = -x;
        }
        else
        {
            let isNeg = false;
        }
        if (y < 0)
        {
            let isNeg = ~isNeg;
            let y = -y;
        }

        if ((y > x) | (y < 0))
        {
            return 0;
        }

        let q = Math.divide(x, y + y);

        if ((x - (2 * q * y)) < y)
        {
            if (isNeg)
            {
                return -(q + q);
            }
            return q + q;
        }
        if (isNeg)
        {
            return -(q + q + 1);
        }
        return q + q + 1;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x)
    {
        var int y, i, tmp1, tmp2;

        let y = 0;
        let i = (n / 2) - 1;
        while (~(i < 0)) // i >= 0
        {
            let tmp1 = y + powersOfTwo[i];
            let tmp2 = tmp1 * tmp1;
            // tmp2 > 0 防止溢出
            if (~(tmp2 > x) & (tmp2 > 0))
            {
                let y = tmp1;
            }
            let i = i - 1;
        }
        return y;
    }

    /** Returns the greater value. */
    function int max(int a, int b)
    {
        if (a > b)
        {
            return a;
        }
        return b;
    }

    /** Returns the smaller value. */
    function int min(int a, int b)
    {
        if (a < b)
        {
            return a;
        }
        return b;
    }

    /** Returns the absolute value of x. */
    function int abs(int x)
    {
        if (x < 0)
        {
            return -x;
        }
        return x;
    }

    function boolean bit(int x, int i)
    {
        if (~((x & powersOfTwo[i]) = 0))
        {
            return true;
        }
        return false;
    }
}
