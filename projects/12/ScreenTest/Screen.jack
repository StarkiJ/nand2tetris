// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack
/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Array screen;
    static boolean color;

    /** Initializes the Screen. */
    function void init() {
        let screen = 16384;
        let color = true;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while(i < 8192){ // 8192 = (256 * 512) / 16
            let screen[i] = 0;
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, mask;

        let address = (y * 32) + (x / 16);
        let mask = Math.powersOfTwo(x & 15);// 2 ^ (x % 16)

        if(color){
            let screen[address] = screen[address] | mask;
        }else{
            let screen[address] = screen[address] & ~mask;
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, a, b, diff;
        
        let dx = x2 - x1;
        let dy = y2 - y1;
        let a = 0;
        let b = 0;
        let diff = 0;// diff = |dy*a| - |dx*b|;

        // 实际上屏幕的Y轴向下，因此这里的“向上”实际是“向下”，反之亦然
        if(dx > 0){
            if(dy > 0){// 右上 
                while(~(a > dx) & ~(b > dy)){// a<=dx & b<=dy
                    do Screen.drawPixel(x1 + a, y1 + b);
                    if(diff < 0){// b/a > dy/dx, 向右
                        let a = a + 1;
                        let diff = diff + dy;
                    }
                    else{// b/a <= dy/dx, 向上
                        let b = b + 1;
                        let diff = diff - dx;
                    }
                }
                return;
            }

            if(dy = 0){// 向右
                while(~(a > dx)){// a<=dx
                    do Screen.drawPixel(x1 + a, y1);
                    let a = a + 1;
                }
                return;
            }

            if(dy < 0){ // 右下
                while(~(a > dx) & ~(b < dy)){// a<=dx & b>=dy
                    do Screen.drawPixel(x1 + a, y1 + b);
                    if(diff < 0){// |b/a| > |dy/dx|, 向右
                        let a = a + 1;
                        let diff = diff - dy;
                    }
                    else{// |b/a| >= |dy/dx|, 向下
                        let b = b - 1;
                        let diff = diff - dx;
                    }
                }
                return;
            }
        }

        if(dx = 0){
            if(dy > 0){// 向上
                while(~(b > dy)){// b<=dy
                    do Screen.drawPixel(x1, y1 + b);
                    let b = b + 1;
                }
                return;
            }

            if(dy = 0){// 单点
                do Screen.drawPixel(x1, y1);
                return;
            }

            if(dy < 0){// 向下
                while(~(b < dy)){// b>=dy
                    do Screen.drawPixel(x1, y1 + b);
                    let b = b - 1;
                }
                return;
            }
        }

        if(dx < 0){
            if(dy > 0){// 左上
                while(~(a < dx) & ~(b > dy)){// a>=dx & b<=dy
                    do Screen.drawPixel(x1 + a, y1 + b);
                    if(diff < 0){// |b/a| > |dy/dx|, 向左
                        let a = a - 1;
                        let diff = diff + dy;
                    }
                    else{// |b/a| <= |dy/dx|, 向上
                        let b = b + 1;
                        let diff = diff + dx;
                    }
                }
                return;
            }

            if(dy = 0){// 向左
                while(~(a < dx)){// a>=dx
                    do Screen.drawPixel(x1 + a, y1);
                    let a = a - 1;
                }
                return;
            }

            if(dy < 0){// 左下
                while(~(a < dx) & ~(b < dy)){// a>=dx & b>=dy
                    do Screen.drawPixel(x1 + a, y1 + b);
                    if(diff < 0){// |b/a| >= |dy/dx|, 向左
                        let a = a - 1;
                        let diff = diff - dy;
                    }
                    else{// |b/a| > |dy/dx|, 向下
                        let b = b - 1;
                        let diff= diff + dx;
                    }
                }
                return;
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     *  and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        while(~(y1 > y2)){// y1<=y2
            do Screen.drawLine(x1, y1, x2, y1);
            let y1 = y1 + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, dx;

        if((r < 0) | (r > 181)){
            return;
        }
        if(r = 0){
            do Screen.drawPixel(x, y);
            return;
        }

        let dy = -r;
        while(~(dy > r)){// dy<=r
            let dx = Math.sqrt((r * r) - (dy * dy));
            do Screen.drawLine(x-dx, y+dy, x+dx, y+dy);
            let dy = dy + 1;
        }
        return;
    }
}
