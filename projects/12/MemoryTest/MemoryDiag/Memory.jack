// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack
/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */
class Memory
{
    static Array ram;
    static int heap, freeList;

    /** Initializes the class. */
    function void init()
    {
        let ram = 0;
        let heap = 2048;
        let freeList = heap;
        let heap[1] = 0;     // next
        let heap[0] = 14336; // length
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address)
    {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value)
    {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size)
    {
        var int ptr, prev, newBlock;

        let ptr = freeList;
        let prev = 0;

        // 最先适应算法
        while (ptr[0] < (size + 3))
        {
            let prev = ptr;
            let ptr = ptr[1];
            if (ptr = 0)
            {
                return 0;
            }
        }

        let newBlock = ptr + size + 1;
        let newBlock[1] = ptr[1];
        let newBlock[0] = ptr[0] - size - 1;
        let ptr[0] = size + 1;
        if (prev = 0) // 第一个块
        {
            let freeList = newBlock;
        }
        else
        {
            let prev[1] = newBlock;
        }

        return ptr + 1;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o)
    {
        // 没维护尾指针，用头插法
        // let o[0] = freeList;
        // let freeList = o - 1;
        // return;

        // 按顺序排列，并尝试合并
        var int ptr, prev, tmp;
        let ptr = freeList;
        let prev = 0;
        let o = o - 1;

        while ((ptr > 0) & (ptr < o))
        {
            let prev = ptr;
            let ptr = ptr[1];
        }

        // 尝试向后合并
        if (o + o[0] = ptr)
        {
            let o[0] = o[0] + ptr[0];
            let o[1] = ptr[1];
        }
        else
        {
            let o[1] = ptr;
        }

        if (prev = 0)
        {
            let freeList = o;
        }
        else
        {
            // 尝试向前合并
            if (prev + prev[0] = o)
            {
                let prev[0] = prev[0] + o[0];
                let prev[1] = o[1];
            }
            else
            {
                let prev[1] = o;
            }
        }
        return;
    }
}
